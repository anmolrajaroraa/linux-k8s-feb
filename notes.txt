1969
Dennis Ritchie and Ken Thompson developed C language and UNIX OS at AT&T Bell Labs
Berkley, California
1975 AT&T started selling UNIX commercially
As a result of legal battle- two versions of UNIX came out - official AT&T Unix and free BSD Unix
BSD - FreeBSD, OpenBSD, NetBSD, DragonFly Unix, PC-BSD

1980s
IBM created AIX, Sun - SunOS (Solaris), HP - HP-UX
Richard Stallman - GNU Project (GNU is not Unix)

1990s
Linus Torvalds
386 computer - POSIX standard
New kernel - kernel + GNU tools

2015
95% of supercomputers
Linux is almost everywhere
Feb 2015 -> v3.19
April 2015 -> 4.0


Distributions of Linux -
Red Hat - Red Hat Enterprise Linux , Fedora
Ubuntu, Debian, others

whoami
hostname
date
su -    -> switching to root mode (type exit to switch to normal user)
sudo passwd root -> To set or change your password
ifdown enp0s3 -> To shutdown network adapter
ifup enp0s3 -> To reboot network adapter
ifconfig -> To check ip address
apt-get update -> Bring in info about new versions of all the packages
apt-get upgrade -> Install these new versions

man ls
man sysctl.conf
man rsyslogd
man -k sys
whatis ls
whereis -m ls -> man <path-to-man-page>
man man



1. Executable commands
2. System calls - exit, fork, read, write, open, close, waitpid, create, link, unlink, execve, chdir
3. Library calls - fopen, malloc
4. Special files - 
	-Block special files - dev/sda1
	-Character special files - dev/stdin, stdout, stderr, random, urandom, null
5. File formats and conventions - etc/passwd
6. Games
7. Misc. - groff -> language specific packages(Czech, german, french, swedish), input encodings(Latin, EBCDIC),
special packages (60bit - provides macros for +-*/ of 60bit integers,papersize,pic,trace), naming packages, writing macros
8. system admn cmnds
9. kernel routines

uptime -> check how many users are logged in
w -> worload - who are those users, combination of several commands
w -h
who
users
ls
cd
cd ..
sudo apt-get install yum
ls -l
ls -lh
ls -lht
ls -lhr
ls -R
ls -lS
ls -l <dir>
alias ls="ls -lh"
alias
unalias ls
chmod 754 bar.txt
chmod 400 bar.txt
chmod a+r bar.txt
chmod g=rwx bar.txt
chmod u-w bar.txt

Permissions  No. of hardlinks 	User owner    Group owner    Size    Modification time  Name of the file/folder
d---------         10            paul         root         4.0K       Jan31 12:00       Documents

Modes - 1. Absolute(numeric) mode


d    ---      ---     ---    (directory)

-				(file)


Permissions -> read(r), write(w), execute(x)


000
001
010
011
100
101
110
111


0  ---   No permission
1  --x  Execute
2  -w-  Write
3  -wx	Execute + write
4  r--  read
5  r-x  read + execute
6  rw-  read + write
7  rwx  read + write + execute



rwx     r-x     r--   ->   754
r--     ---    ---    ->   400


2. Symbolic mode

+  ->  Add a permission
-  -> Remove a permission
= -> Set new permissons by overriding older one


u -> user/owner
g -> group
o -> others
a -> all



o = rwx
g + w
u - x
a - x



sort file.txt
sort -r file.txt
less <file-name>
more <file-name>
cat > file.txt -> open file in overwrite mode
cat >> file.txt -> open file in append mode
cat file.txt -> print contents of file
cp -p fileA fileB
cp -i fileA fileB
mv -i fileA fileB
cat fileA | more
cat -n file.txt
pwd
pwd &
ps
ps -f
ps <pid>
apt-get purge yum > /dev/null 2>&1  &

uid - user id
pid - process id (unique 4/5 digit number)
jobid - serial number ids
ppid - parent process id
c - cpu utilization time
stime- start time of process
tty - termnial associated with our process
time - time taken by our process
cmd - type of shell

ps -a
ps -x

kill <pid>

kill -9 <pid>

bg <pid>

fg <pid>

top

nice <value>

-20 (highest priority) to 19 (lowest priority)

renice <value> <pid>

df -> show the amount of avail disk space

free -> free and used physical and swap storage



Type of processes -

1. Parent and child processes
2.  Zombie and orphan processes
3. Daemon processes




Users can be found under - /etc/passwd
Groups can be found under - /etc/group
Passwords can be found under - /etc/shadow
To see into .gz file -> tar -tf <>

/ - rootfolder
bin - (user binaries) common programs shared by the system, sysadmin and users
boot - Startup files and kernel(vmlinuz). GRand Unified Boot loader (GRUB)
dev - (device files) files having props related to hardware
etc - (configuratuin files)imp sys conf files
home - directories for users
initrd - (on some distributions) info for booting - not delete it
lib - library files needed by user programs and system
lost + found -  every partition has this folder, contains files that were saved during failure4
misc - for misc purposes
mnt - (mount directory) point from where you can mount remote file systems
media - removable external storages
opt - (optionl add-on applications) third party add-on softwares
proc - (process information) contain info about system resources
root - admin user's home dir
sbin - (system binaries) programs shared by the system and sysadmin
tmp - (temporary files) temp files used by system, cleaned upon reboot
usr - programs, libraries, docs for user-related programs
var - (variable files)storing all variable files and temp files needed across reboots
srv - (service data)



Cron

* * * * *

0 5 * * 1 -> 5 am every monday

15 12 1 * * -> 12:15 on 1st of every month

0 0,12 * * * -> 12 am and 12 pm every day
0 0,12 * * Mon-Fri -> Only on M,T,W,T,F
0/15 * * * *
0/15 12 * * Mon-Fri





1. Minute (0-59)
2. Hour (0-23)
3. Day of month (1-31)
4. Month (1-12) (Jan-Dec)
5. Day of week (0-6) (Sun-Sat)
6. Command


* -> all the values should be used
- -> used for range
/ -> used for giving intervals
, -> separating items


Filter table ( default table ) - managing traffic and connections
- INPUT -> packages destined for local socktes
-FORWARD -> routing the packets through the system
- OUTPUT -> packets generated locally

NAT table - it is used when a packet tries to create a new connection (changing the flow of packets)
- PREROUTING -> used for altering a packet as soon as it is received
- OUTPUT -> used for altering locally generated packets
- POSTROUTING -> used for altering packets as they are about to go

MANGLE table - it is used for altering packtes (packet alteration)
- PREROUTING -> used for altering a packet as soon as it is received
- OUTPUT -> used for altering locally generated packets
- POSTROUTING -> used for altering packets as they are about to go
- INPUT ->for incoming packets 
- FORWARD -> for packets routed through the system

iptables -L -n -v

iptables -t nat -L -n -v

iptables -A INPUT -s 192.168.19.250 -j DROP

iptables -A INPUT -p tcp -s 192.168.19.250 -j DROP

iptables -D INPUT -s 192.168.19.250 -j DROP

iptables -A OUTPUT -p tcp --dport 22 -j DROP

iptables -A INPUT -p tcp --dport 22 -j ACCEPT

iptables -A INPUT -p tcp -m multiport --dport 22,80,8080,443 -j ACCEPT

iptables -A OUTPUT -p tcp -d 192.168.19.0/24 --dport 22 -j ACCEPT

iptables -t nat -A PREROUTING -i eth0 -p tcp --dport 25 -j REDIRECT --to-port 8000




apt-cache search <package-name> <package-name>



ESXi -> Elastic Sky X integrated

Direct console user interface ( DCUI)

VCenter -> orchestrator for ESXi hypervisors

Vsphere client

Kubernetes - manage, deploy, monitor containers
self-service Platform-as-a-Service

Docker - creates containers

containers - smallest unit of k8s world

container orchestration -
1. provisioning and deployment of containers
2. scaling of containers
3. Movement of containers from one node to another node
4. Allocation of resources to containers
5. Exposing the services
6. Load balancing of service discovery
7. Health monitoring of containers
8. Configuration of application or micro-services

nodes - host on which pod runs

pods -  management unit in k8s. Each pod has its unique own ip address and storage & network resources. Containers share these networking and storage resources. They are mortal. YAML format for PodSpecs.


deployments - used for having HA in k8s. Pod is mortal but keeps check of the desired no of pods and assures that specified no of containers are up and running. Deployment also specifies how many instances of pods should run. YAML format is used.

services - it is an abstraction of a logical set of pods and a policy by which we can access them.
Sometimes they are known as micro-services.
ClusterIP - internal to k8s cluster
NodePort - publish endpoint for external users

container image - Docker Hub is a registry 

kubectl apply - this command is declarative

sudo snap install kubectl --classic

sudo apt-get install python-pip

sudo pip install awscli

Install kops from official git of kops

Replication Controller -> Scaling

Horizontal scaling -> Stateless applications

Vertical scaling -> Stateful applications

KOPS commands :-
1. Create IAM user with Admin access

2. aws configure

3. aws s3api create-bucket --bucket mynewcluster-state-store --region=ap-south-1 --create-bucket-configuration LocationConstraint=ap-south-1

4. export KOPS_STATE_STORE=s3://mynewcluster-state-store
   export KOPS_CLUSTER_NAME=mycluster.kops.local

Optional -> ssh-keygen (only if you dont have any ssh-keys already)

5. kops create cluster --node-count=2 --node-size=t2.micro --master-size=t2.micro --zones=ap-south-1a --name=${KOPS_CLUSTER_NAME}
 
6. kops update cluster --name ${KOPS_CLUSTER_NAME} --yes

7. kops validate cluster


Deployment commands :
kubectl create -f helloworld.yml
kubectl expose deployment helloworld-deployment --type=NodePort
kubectl describe service helloworld-deployment
kubectl get pods -o json
kubectl get pods -o jsonpath={.items[*].spec.containers[*].name}
kubectl set image deployment helloworld-deployment k8s-demo=anmolrajarora/k8s-images:v0.0.2
kubectl rollout status deployment/helloworld-deployment
kubectl rollout undo deployment/helloworld-deployment
kubectl rollout history deployment/helloworld-deployment
kubectl rollout undo deployment/helloworld-deployment --to-revision=3
kubectl set image deployment helloworld-deployment k8s-demo=anmolrajarora/k8s-images:v0.0.2 --record=true
kubectl edit deployment/helloworld-deployment









Please take this survey :)
https://goo.gl/forms/A6J2OVyOJtM4c7252
